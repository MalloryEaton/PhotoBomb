<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <assembly alias="System.Drawing" name="System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
  <data name="$this.Icon" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
    <value>
        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
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAECAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAA==
</value>
  </data>
</root>